test = try({
Y_gls_gasp_up = gls_up_gasp(formula, Y_obs, sites, X, D = D)
})})
}
if(class(test)[1] == "try-error" | !4 %in% method){
Y_gls_gasp_up = NULL
t_gls_gasp_up = rep(NA,3)
}
run_simu = function(N,
K,
D,
n_star,
k_star,
method = c(1, 2),
sX = rep(1, length(sites)),
seed = as.numeric(Sys.time()),
discrete = FALSE,
mispe = F,
wrong_X = F,
sinuzo = F,
V = NULL,
trend = F) {
set.seed(seed)
sites = sort(runif(N))
set.seed(seed)
beta = c(runif(D,2,5),runif(K-D,10,1000))
set.seed(seed)
nugget = c(rep(0,D),runif(K-D,0.001,0.05))
simu = simu_GaSP(D,sites,beta, nugget,0,seed,discrete,mispe,sinuzo,V_save = V,trend = trend)
Y = simu$Y
X = simu$X
#X
a = which.min(X)
b = which.max(X)
plot(sites,Y[a,], cex = 0.5, pch = 16, col="blue")
lines(sites,X[a,]%*%simu$B,col="blue")
points(sites,Y[b,], cex = 0.5, pch = 16, col="red")
lines(sites,X[b,]%*%simu$B,col="red")
#X = runif(K,-1,1)
if ( wrong_X){
if (discrete){
if(D!=2){
stop("in discrete case only D=2 allowed")
}
x = sample(rep(c(1,0),ceiling(K/2))[1:K])
X = matrix(0,ncol = 2, nrow= K)
X[x==1,1] = 1
X[x==0,2] = 1
} else {
X = matrix(runif(K*D),ncol=D)
}
}
par(mfrow=c(1,1))
# par(mar=c(4.1,2.1,4.1,2.1))
# plot(sites,simu$B[1,],type="l",ylim=range(c(-simu$B,simu$B)), ylab = "Xb(s)", main = "Moyenne",col=3)
# lines(sites,simu$B[2,],type="l")
# plot(sites,Y[1,], ylim = range(Y),pch = 16,type = "l", cex=0.5,col=X[1]+2, ylab = "Y", main = "Simulation")
# points(sites[-n_star],Y[1,-n_star], ylim = range(Y),pch = 16, cex = 0.5)
# for ( i in 2:10){
#   points(sites,Y[i,], ylim = range(Y),type = "l",pch = 16, cex = 0.5,col=X[i]+2)
#   points(sites[-n_star],Y[i,-n_star], ylim = range(Y),pch = 16, cex = 0.5)
# }
#
#
# legend("bottomright",c("X=1","X=-1"),lty=1,col=c(3,1))
#
## missing values
Y_obs = Y
Y_obs[k_star,n_star] = NA
#X = cbind(X,rbinom(K,1,0.5),runif(K),rnorm(K))
if(1 %in% method){
t_ols_gasp = system.time({
count = 0
test = try({
obj_ols_gasp = test_ols_gasp(Y_obs,sites,X, tol = 1e-6)
obj_ols_gasp = fit_ols_gasp(obj_ols_gasp)#,B = simu$B[-n_star])#, A = simu$A)#,A_output_t = rbind(simu$B,simu$V)[,-n_star])
Y_ols_gasp = pred_ols_gasp(obj_ols_gasp)
while(sum(is.na(Y_ols_gasp))>0 & count < 20){
obj_ols_gasp = test_ols_gasp(Y_obs,sites,X)
obj_ols_gasp = fit_ols_gasp(obj_ols_gasp)#,B = simu$B[-n_star])#, A = simu$A)#,A_output_t = rbind(simu$B,simu$V)[,-n_star])
Y_ols_gasp = pred_ols_gasp(obj_ols_gasp)
count = count + 1
}
})
})
}
if(class(test)[1] == "try-error" | !1 %in% method){
Y_ols_gasp = NULL
t_ols_gasp = rep(NA,3)
}
if(2 %in% method){
t_gasp  = system.time({
test = try({
obj_gasp =  fit_fgasp(Y_obs,sites)#,A = cbind(X,simu$A), A_output_t = rbind(simu$B,simu$V)[,-n_star])
Y_gasp = pred_fgasp(obj_gasp)
while(sum(is.na(Y_gasp))>0 & count < 20){
obj_gasp =  fit_fgasp(Y_obs,sites)#,A = cbind(X,simu$A), A_output_t = rbind(simu$B,simu$V)[,-n_star])
Y_gasp = pred_fgasp(obj_gasp)
count = count + 1
}
})})
}
if(class(test)[1] == "try-error" | !2 %in% method){
Y_gasp = NULL
t_gasp = rep(NA,3)
}
ind_na = is.na(Y_obs)
cat("ols_gaSP",RMSE(Y[ind_na],Y_ols_gasp[ind_na])," gaSP",RMSE(Y[ind_na],Y_gasp[ind_na]),"\n")
### essai du code du mec
# Aobs = Y_obs
# Aobs[ind_na] = 0
# diagD = rep(1,nrow(Y_obs))
# sample.mis.SMC = SMCfit(Aobs = Aobs, X = X, diagD, 0.5,0.5, 1)
# fitted.beta.sample.SMC = sample.mis.SMC$beta
# fitted.B.sample.SMC = sqrt(diagD) * sample.mis.SMC$Bhat
# fitted.sample.SMC = X %*% sample.mis.SMC$beta + sqrt(diagD) * sample.mis.SMC$Bhat
#
# RMSE(Y[ind_na],fitted.sample.SMC[ind_na])
#
#
if(3 %in% method){
t_gls_gasp = system.time({
test = try({
Y_gls_gasp = gls_gasp(formula, Y_obs, sites, X, D = D)
})
})
}
if(class(test)[1] == "try-error" | !3 %in% method){
Y_gls_gasp = NULL
t_gls_gasp = rep(NA,3)
}
if(4 %in% method){
t_gls_gasp_up = system.time({
test = try({
Y_gls_gasp_up = gls_up_gasp(formula, Y_obs, sites, X, D = D)
})})
}
if(class(test)[1] == "try-error" | !4 %in% method){
Y_gls_gasp_up = NULL
t_gls_gasp_up = rep(NA,3)
}
return(
list(
X = X,
A = simu$A,
B = simu$B,
V = simu$V,
beta = beta,
nugget = nugget,
Y = Y,
sites = sites,
Y_obs = Y_obs,
Y_ols_gasp = Y_ols_gasp,
Y_gasp = Y_gasp,
Y_gls_gasp = Y_gls_gasp,
Y_gls_gasp_up = Y_gls_gasp_up,
time = c(t_ols_gasp[3], t_gasp[3], t_gls_gasp[3], t_gls_gasp_up[3])
)
)
}
sX = rep(1,N)
#
res = list()
length(res) = n_rep
for ( seed in 1:n_rep){
print(seed)
set.seed(seed)
n_star = sort(sample(1:N,round(N*0.9)))
#n_star = c(26:475,526:975)
res[[seed]]  = run_simu(N,K,2,n_star,k_star,method ,sX,seed,discrete = T,sinuzo = T,
V = V_list[[seed]])
}
res
library(plotly)
library(DiceEval)
library(ggnewscale)
library(bannerCommenter)
library(data.table)
library(tidyr)
library(grDevices)
library(latex2exp)
library(Cairo)
op = par()
source("boxplot_1.R")
source("scatter_1.R")
source("scatter_2.R")
source("scatter_3.R")
setwd("~/Library/CloudStorage/GoogleDrive-melina.ribaud@gmail.com/Mon disque/postdoc_HEC_UQAM/simulations/analyse")
source("boxplot_1.R")
source("scatter_1.R")
source("scatter_2.R")
source("scatter_3.R")
source("scatter_4.R")
source("barplot_1.R")
simu = c("discrete", "continuous" , "discrete_mispe", "discrete_mispe_block")
fig_time = T
save_pdf = T
i = 1
filename = simu[i]
load(file = paste(c("../data_res/res_",filename,".Rdata"),collapse = ""))
##---------------------------------------------------------------
##                            GRAPH 1                           -
##---------------------------------------------------------------
name_fig = paste0("S",i)
discrete = ifelse(i==2, F, T)
l = 10
x <- res[[l]]$X
if(discrete){
x <- res[[l]]$X[,1]
}
proc_a = which.min(x[11:length(x)])+10
proc_b = which.max(x[11:length(x)])+10
Y = res[[l]]$Y
sites = res[[l]]$sites
Y_obs = res[[l]]$Y_obs
ind_na = is.na(Y_obs[50,])
Y_GaSP = res[[l]]$Y_gasp
Y_OLS_GaSP = res[[l]]$Y_ols_gasp
n_rep = length(res)
rmse = t(sapply(1:n_rep,function(i){
ind_na = is.na(res[[i]]$Y_obs)
Y = res[[i]]$Y
sapply(res[[i]][10:11], function(al){
if(length(al)==length(Y)){
ind_pb = !is.na(al[ind_na])
return(RMSE(Y[ind_na][ind_pb], al[ind_na][ind_pb]))
}else{
return(NA)
}
})
}))
rmse
colnames(rmse) = c("Y_lmcc","Y_gasp")
save_pdf
save_pdf = F
boxplot_1(
value = rmse,
save_pdf = save_pdf,
path = paste(c("figures/rmse_", name_fig, ".eps"), collapse = ""),
width = 10,
height = 6,
colorTitle = "black",
sizeTitle = 25,
formeTitle = "bold",
colorAxe = "black",
sizeAxe = 20,
formeAxe = "bold.italic",
textSize = 20,
title = paste(c("Root Mean Square Error (S",i,")"),collapse = ""),
col_boxplot = "black",
fill_box = c("#E69F00","#45b9d2"),
transparence_box = 0.9
)
setwd("~/Library/CloudStorage/GoogleDrive-melina.ribaud@gmail.com/Mon disque/postdoc_HEC_UQAM/comparaison_jasa")
source("MCCI_functions.R")
library(mvmeta)
library(Jmisc)
library(Rcpp)
## functions to estimate GP
sourceAll("../functions/")
sourceAll("../simulations/functions/")
n_rep = 1
res = list()
n_rep = 2
res = list()
length(res) = n_rep
seed
print(seed)
## parameters ##
N = 1000
K = 100
D = 20
k_star = c(11:K)
n_star = sort(sample(1:N,round(N*0.9)))
## GP simulations ##
set.seed(seed)
sites = sort(runif(N))
set.seed(seed)
beta = c(runif(D,2,5),runif(K-D,10,1000))
set.seed(seed)
nugget = c(rep(0,D),runif(K-D,0.001,0.05))
simu = simu_GaSP(D,sites,beta, nugget,0,seed)
## parameters ##
N = 100
K = 10
D = 2
k_star = c(11:K)
n_star = sort(sample(1:N,round(N*0.9)))
## GP simulations ##
set.seed(seed)
sites = sort(runif(N))
set.seed(seed)
beta = c(runif(D,2,5),runif(K-D,10,1000))
set.seed(seed)
nugget = c(rep(0,D),runif(K-D,0.001,0.05))
simu = simu_GaSP(D,sites,beta, nugget,0,seed)
Y = simu$Y
X = simu$X
Y_obs = Y
Y_obs[k_star,n_star] = NA
## parameters ##
N = 100
K = 20
D = 2
k_star = c(11:K)
n_star = sort(sample(1:N,round(N*0.9)))
## GP simulations ##
set.seed(seed)
sites = sort(runif(N))
set.seed(seed)
beta = c(runif(D,2,5),runif(K-D,10,1000))
set.seed(seed)
nugget = c(rep(0,D),runif(K-D,0.001,0.05))
simu = simu_GaSP(D,sites,beta, nugget,0,seed)
Y = simu$Y
X = simu$X
## parameters ##
N = 100
K = 30
D = 20
k_star = c(11:K)
n_star = sort(sample(1:N,round(N*0.9)))
## GP simulations ##
set.seed(seed)
sites = sort(runif(N))
set.seed(seed)
beta = c(runif(D,2,5),runif(K-D,10,1000))
set.seed(seed)
nugget = c(rep(0,D),runif(K-D,0.001,0.05))
simu = simu_GaSP(D,sites,beta, nugget,0,seed)
Y = simu$Y
X = simu$X
Y_obs = Y
Y_obs[k_star,n_star] = NA
sum(is.na(Y_obs))/(K*N)
Aobs = Y_obs
Aobs[is.na(Aobs)] = 0
t_mcci = system.time({
count = 0
test = try({
mcci_fit = MCCIfit(Aobs,X, lambda2_grid = 50)
Y_mcci = mcci_fit$Ahat
})
while(class(test)[1] == "try-error" & count < 2){
test = try({
mcci_fit = MCCIfit(Aobs,X, lambda2_grid = round(50/(count+2)))
Y_mcci = mcci_fit$Ahat
})
count = count + 1
print(count)
}
})
if(class(test)[1] == "try-error" ){
Y_mcci = NULL
t_mcci = rep(NA,3)
}
t_ols_gasp = system.time({
count = 0
sites = sort(runif(N))
test = try({
obj_ols_gasp = test_ols_gasp(Y_obs,sites,X)
obj_ols_gasp = fit_ols_gasp(obj_ols_gasp)#,B = simu$B[-n_star])#, A = simu$A)#,A_output_t = rbind(simu$B,simu$V)[,-n_star])
Y_ols_gasp = pred_ols_gasp(obj_ols_gasp)
while(sum(is.na(Y_ols_gasp))>0 & count < 10){
obj_ols_gasp = test_ols_gasp(Y_obs,sites,X)
obj_ols_gasp = fit_ols_gasp(obj_ols_gasp)#,B = simu$B[-n_star])#, A = simu$A)#,A_output_t = rbind(simu$B,simu$V)[,-n_star])
Y_ols_gasp = pred_ols_gasp(obj_ols_gasp)
count = count + 1
}
})
})
if(class(test)[1] == "try-error"){
Y_ols_gasp = NULL
t_ols_gasp = rep(NA,3)
}
ind_na = is.na(Y_obs)
cat("ols_gaSP",RMSE(Y[ind_na],Y_ols_gasp[ind_na])," mcci",RMSE(Y[ind_na], Y_mcci[ind_na]),"\n")
## parameters ##
N = 200
K = 100
D = 20
k_star = c(11:K)
n_star = sort(sample(1:N,round(N*0.9)))
## GP simulations ##
set.seed(seed)
sites = sort(runif(N))
set.seed(seed)
beta = c(runif(D,2,5),runif(K-D,10,1000))
set.seed(seed)
nugget = c(rep(0,D),runif(K-D,0.001,0.05))
simu = simu_GaSP(D,sites,beta, nugget,0,seed)
Y = simu$Y
X = simu$X
Y_obs = Y
Y_obs[k_star,n_star] = NA
sum(is.na(Y_obs))/(K*N)
Aobs = Y_obs
Aobs[is.na(Aobs)] = 0
t_mcci = system.time({
count = 0
test = try({
mcci_fit = MCCIfit(Aobs,X, lambda2_grid = 50)
Y_mcci = mcci_fit$Ahat
})
while(class(test)[1] == "try-error" & count < 2){
test = try({
mcci_fit = MCCIfit(Aobs,X, lambda2_grid = round(50/(count+2)))
Y_mcci = mcci_fit$Ahat
})
count = count + 1
print(count)
}
})
4210/3
if(class(test)[1] == "try-error" ){
Y_mcci = NULL
t_mcci = rep(NA,3)
}
t_ols_gasp = system.time({
count = 0
sites = sort(runif(N))
test = try({
obj_ols_gasp = test_ols_gasp(Y_obs,sites,X)
obj_ols_gasp = fit_ols_gasp(obj_ols_gasp)#,B = simu$B[-n_star])#, A = simu$A)#,A_output_t = rbind(simu$B,simu$V)[,-n_star])
Y_ols_gasp = pred_ols_gasp(obj_ols_gasp)
while(sum(is.na(Y_ols_gasp))>0 & count < 10){
obj_ols_gasp = test_ols_gasp(Y_obs,sites,X)
obj_ols_gasp = fit_ols_gasp(obj_ols_gasp)#,B = simu$B[-n_star])#, A = simu$A)#,A_output_t = rbind(simu$B,simu$V)[,-n_star])
Y_ols_gasp = pred_ols_gasp(obj_ols_gasp)
count = count + 1
}
})
})
if(class(test)[1] == "try-error"){
Y_ols_gasp = NULL
t_ols_gasp = rep(NA,3)
}
ind_na = is.na(Y_obs)
cat("ols_gaSP",RMSE(Y[ind_na],Y_ols_gasp[ind_na])," mcci",RMSE(Y[ind_na], Y_mcci[ind_na]),"\n")
library(plotly)
library(DiceEval)
library(ggnewscale)
library(bannerCommenter)
library(data.table)
library(tidyr)
library(grDevices)
library(latex2exp)
library(tidyr)
library(Cairo)
op = par()
source("../simulations/analyse/boxplot_1.R")
source("../simulations/analyse/barplot_1.R")
source("../simulations/analyse/boxplot_1.R")
source("../simulations/analyse/barplot_1.R")
setwd("~/Library/CloudStorage/GoogleDrive-melina.ribaud@gmail.com/Mon disque/simulation_lmcc/simulation_S5_S8")
library(plotly)
library(DiceEval)
library(ggnewscale)
library(bannerCommenter)
library(data.table)
library(tidyr)
library(grDevices)
library(latex2exp)
library(tidyr)
library(Cairo)
op = par()
source("../simulation_S1_S4/analyse/boxplot_1.R")
source("../simulation_S1_S4/analyse/barplot_1.R")
fig_time = T
save_pdf = T
S = c(5:8)
i = 1
file_name = paste(c("data/res_mcci",i,".Rdata"), collapse = "")
load(file = file_name)
n_rep = max(which(sapply(res,length)>0))
rmse = t(sapply(1:n_rep,function(i){
ind_na = is.na(res[[i]]$Y_obs)
Y = res[[i]]$Y
sapply(res[[i]][c("Y_ols_gasp","Y_mcci")], function(al){
if(length(al)==length(Y)){
ind_pb = !is.na(al[ind_na])
return(RMSE(Y[ind_na][ind_pb], al[ind_na][ind_pb]))
}else{
return(NA)
}
})
}))
colnames(rmse) = c("Y_lmcc","Y_mcci")
rmse
save_pdf
save_pdf = F
boxplot_1(
value = rmse,
save_pdf = save_pdf,
path = paste0(c("figures/rmse_mcci_",i,".eps"),collapse =""),
width = 10,
height = 6,
colorTitle = "black",
sizeTitle = 25,
formeTitle = "bold",
colorAxe = "black",
sizeAxe = 20,
formeAxe = "bold.italic",
textSize = 20,
title = paste(c("Root Mean Square Error (S",S[i],")"),collapse = ""),
col_boxplot = "black",
fill_box = c("#E69F00","#c9a0dc"),
transparence_box = 0.9
)
16065*1.4
16065*1.4/89000
(806.82+1942.84)*1.4/89000
